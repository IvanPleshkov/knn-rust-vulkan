#define CONCAT(a, b) a##b

#define BHEAP_ID(NAME, a) CONCAT(NAME, a)

uint BHEAP_ID(BHEAP_NAME, offset) = 0;
uint BHEAP_ID(BHEAP_NAME, capacity) = 0;
uint BHEAP_ID(BHEAP_NAME, size) = 0;

void BHEAP_ID(BHEAP_NAME, swap)(uint i, uint j) {
    BHEAP_TYPE tmp = BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset) + i];
    BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset) + i] = BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset) + j];
    BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset) + j] = tmp;
}

bool BHEAP_ID(BHEAP_NAME, cmp)(uint i, uint j) {
    return BHEAP_CMP(
        (BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset) + i]),
        (BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset) + j])
    );
}

void BHEAP_ID(BHEAP_NAME, sift_down)(uint i) {
    while (2 * i + 1 < BHEAP_ID(BHEAP_NAME, size)) {
        uint left = 2 * i + 1;
        uint right = 2 * i + 2;
        uint j = left;
        if (right < BHEAP_ID(BHEAP_NAME, size) && BHEAP_ID(BHEAP_NAME, cmp)(right, left)) {
            j = right;
        }
        if (BHEAP_ID(BHEAP_NAME, cmp)(i, j)) {
            break;
        }
        BHEAP_ID(BHEAP_NAME, swap)(i, j);
        i = j;
    }
}

void BHEAP_ID(BHEAP_NAME, push)(BHEAP_TYPE score) {
    uint i = BHEAP_ID(BHEAP_NAME, size);
    BHEAP_ID(BHEAP_NAME, size)++;
    BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset) + i] = score;
    while (i > 0 && BHEAP_ID(BHEAP_NAME, cmp)(i, (i - 1) / 2)) {
        BHEAP_ID(BHEAP_NAME, swap)(i, (i - 1) / 2);
        i = (i - 1) / 2;
    } 
}

BHEAP_TYPE BHEAP_ID(BHEAP_NAME, top)() {
    return BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset)];
}

void BHEAP_ID(BHEAP_NAME, pop)() {
    BHEAP_ID(BHEAP_NAME, size)--;
    BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset)] = BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset) + BHEAP_ID(BHEAP_NAME, size)];
    BHEAP_ID(BHEAP_NAME, sift_down)(0);
}

void BHEAP_ID(BHEAP_NAME, change_top)(BHEAP_TYPE new_value) {
    BHEAP_DATA[BHEAP_ID(BHEAP_NAME, offset)] = new_value;
    BHEAP_ID(BHEAP_NAME, sift_down)(0);
}
