#version 450

#define LARGE_K

struct Score {
    uint idx;
    float score;
};

layout(binding = 0) uniform KnnUniformBuffer {
    uint dim;
    uint capacity;
    uint block_size;
    uint k;
} knn;

layout(binding = 1) buffer VectorData {
    float data[];
} vectors;

layout(binding = 2) buffer QueryData {
    float data[];
} query;

layout(binding = 3) buffer ScoresData {
    Score data[];
} scores;

#ifdef LARGE_K
#define BHEAP_DATA scores.data
#else
Score heap_data[8];
#define BHEAP_DATA heap_data
#endif
#define BHEAP_NAME bheap
#define BHEAP_TYPE Score
#define BHEAP_CMP(a, b) a.score > b.score
#include "bheap.comp"

float positive_infinity = 1.0 / 0.0;

void main()
{
    BHEAP_ID(bheap, capacity) = knn.k;
#ifdef LARGE_K
    BHEAP_ID(bheap, offset) = gl_GlobalInvocationID.x * knn.k;
#else
    BHEAP_ID(bheap, offset) = 0;
#endif
    for (uint i = 0; i < knn.k; i++) {
        BHEAP_DATA[BHEAP_ID(bheap, offset) + i].score = positive_infinity;
    }

    for (uint relativePointId = 0; relativePointId < knn.block_size; relativePointId++) {
        uint pointId = gl_GlobalInvocationID.x * knn.block_size + relativePointId;
        float score = 0.0;
        for (uint i = 0; i < knn.dim; i++) {
            score += vectors.data[pointId * knn.dim + i] * query.data[i];
        }
        // check if not nan
        if (score < 0.0 || 0.0 < score || score == 0.0) {
            if (BHEAP_ID(bheap, size) == BHEAP_ID(bheap, capacity)) {
                if (score < BHEAP_ID(bheap, top)().score) {
                    BHEAP_ID(bheap, change_top)(Score(pointId, score));
                }
            } else {
                BHEAP_ID(BHEAP_NAME, push)(Score(pointId, score));
            }
        }
    }

#ifndef LARGE_K
    for (uint i = 0; i < knn.k; i++) {
        scores.data[gl_GlobalInvocationID.x * knn.k + i] = heap_data[i];
    }
#endif
}
